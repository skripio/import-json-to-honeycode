AWSTemplateFormatVersion: 2010-09-09
Description: Stack for Firehose DeliveryStream S3 Destination.
Resources:
  CaptainsFirehose:
    DependsOn:
      - deliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref CaptainsNotificationBucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt deliveryRole.Arn
  CaptainsNotificationBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  deliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CaptainsNotificationBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CaptainsNotificationBucket
                  - '*'
      Roles:
        - !Ref deliveryRole

  S3NotificationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |

          import json
          import csv
          import boto3
          from urllib.parse import unquote_plus

          def lambda_handler(event, context):

              for record in event['Records']:
                  bucketname = record['s3']['bucket']['name']
                  jsonfilename = unquote_plus(record['s3']['object']['key'])
                  csvfilepath = "/tmp/test.csv"
                  csvfilekey = "test.csv"
                  targetWorkbookId = 'f24109b3-6ec1-4aa1-aebf-5e66ed319d8c'
                  targetTableId = '6ea8e0f0-b7d6-47da-8668-db2d4c1030d4'

                  honeycode_client = boto3.client('honeycode')
                  s3_client = boto3.client('s3')

                  # Read the json file from s3 bucket
                  s3 = boto3.resource('s3')
                  obj = s3.Object(bucketname, jsonfilename)

                  # Parse json and write to a csv file
                  csvfile = open(csvfilepath, 'w', newline='')
                  csv_writer = csv.writer(csvfile)
                  jsonData = json.loads('[' + obj.get()['Body'].read().decode('utf-8').replace('}{', '},{') + ']')
                  flag = True
                  for line in jsonData:
                      if flag:
                          header = line.keys()
                          csv_writer.writerow(header)
                          flag = False
                      csv_writer.writerow(line.values())
                  csvfile.close()

                  # Store the csv file back to s3 bucket
                  s3_client.upload_file(csvfilepath, bucketname, csvfilekey, ExtraArgs={'ContentType': 'text/csv'})

                  presigned_url = s3_client.generate_presigned_url('get_object',
                                                                      Params={'Bucket': bucketname,
                                                                              'Key': csvfilekey},
                                                                      ExpiresIn='100')

                  # import the csv file to the workbook
                  response = honeycode_client.start_table_data_import_job(
                      workbookId = targetWorkbookId,
                      destinationTableId = targetTableId,
                      dataSource = { "dataSourceConfig": {"dataSourceUrl": presigned_url } },
                      dataFormat = 'DELIMITED_TEXT',
                      importOptions = {
                        "delimitedTextOptions": {
                          "delimiter": ",",
                          "hasHeaderRow": True,
                          "ignoreEmptyRows": True,
                          "dataCharacterEncoding": "UTF-8"
                        }
                      },
                      clientRequestToken = 'dbe11a0e-0aee-42f4-b93a-fb3070b01b18')

                  """
                  # Job status query
                  response2 = honeycode_client.describe_table_data_import_job(
                  workbookId = targetWorkbookId,
                  tableId = targetTableId,
                  jobId = 'df1f3cd7-f58e-46a4-a50b-17d96c889b99')
                  print(response2)
                  """

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Execution successful!')
                  }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.6
      Timeout: 5
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3NotificationLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${CaptainsNotificationBucket}'
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Sub 'arn:aws:s3:::${CaptainsNotificationBucket}'
              - Effect: Allow
                Action:
                  - 'honeycode:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3NotificationLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${CaptainsNotificationBucket}'

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${CaptainsNotificationBucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      add_notification(LambdaArn, Bucket)
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILURE'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(LambdaArn, Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                        'LambdaFunctionArn': LambdaArn,
                        'Events': [
                            's3:ObjectCreated:*'
                        ]
                    }
                  ]
                }
              )
              print("Put request completed....")

          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3NotificationLambdaFunction.Arn
      Bucket: !Ref CaptainsNotificationBucket
